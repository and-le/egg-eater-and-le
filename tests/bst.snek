(fun (make_bst root_val left right)
    (tuple root_val left right) 
)

(fun (bst_insert root val)
    (if (= root nil)
        (tuple val nil nil)
        (let ( (root_val (index root 0)) (left (index root 1)) (right (index root 2)) )
             (if (= val root_val)
                 (make_bst root_val left right)
                 (if (< val root_val)
                     (make_bst root_val (bst_insert left val) right)
                     (make_bst root_val left (bst_insert right val) )
                 )
             ) 
        )
    )
)

(fun (bst_contains root query)
    (if (= root nil)
        false 
        (let ( (root_val (index root 0)) (left (index root 1)) (right (index root 2)) )
             (if (= query root_val)
                true 
                (if (< query root_val)
                    (bst_contains left query)
                    (bst_contains right query)
                )
             )
        )
    )
)

(let ( (tree (make_bst 50 nil nil)) )
     (block
        (print tree)
        (set! tree (bst_insert tree 25))
        (print tree)
        (set! tree (bst_insert tree 75))
        (print tree)
        (set! tree (bst_insert tree 100))
        (print tree)
        (set! tree (bst_insert tree 0))
        (print tree)
        (print (bst_contains tree 50))
        (print (bst_contains tree 100))
        (print (bst_contains tree 0))
        (print (bst_contains tree 37))
        (print (bst_contains tree 86))
     )
)
